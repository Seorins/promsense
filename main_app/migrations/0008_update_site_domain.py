# main_app/migrations/xxxx_update_site_domain.py 파일 내용

# Generated by Django 5.2 on 2025-05-04 07:18 # <- 이 부분은 원래 생성된 내용 유지 가능

from django.db import migrations
from django.conf import settings  # settings import 추가

# settings.SITE_ID 를 기반으로 도메인 업데이트하는 함수
def update_site_domain(apps, schema_editor):
    Site = apps.get_model('sites', 'Site')
    # settings.SITE_ID 를 사용하거나 직접 pk=1 지정
    site_pk = getattr(settings, 'SITE_ID', 1)
    try:
        s = Site.objects.get(pk=site_pk)
        # !!! 중요: 아래 도메인 이름을 실제 사용하는 주소로 변경하세요 !!!
        # 예: 'promsense.onrender.com' 또는 'www.promsense.com' 등
        s.domain = 'www.promsense.com'
        s.name = 'www.promsense.com'  # 이름도 같이 변경하는 것이 좋음
        s.save()
        print(f"\nSite {site_pk} domain updated to {s.domain}") # 로그 확인용 (선택사항)
    except Site.DoesNotExist:
        print(f"\nSite with pk={site_pk} does not exist, skipping update.")


# 이전 상태 ('example.com')로 돌리는 함수 (선택사항, 롤백 시 사용)
def revert_site_domain(apps, schema_editor):
    Site = apps.get_model('sites', 'Site')
    site_pk = getattr(settings, 'SITE_ID', 1)
    try:
        s = Site.objects.get(pk=site_pk)
        s.domain = 'example.com'
        s.name = 'example.com'
        s.save()
        print(f"\nSite {site_pk} domain reverted to {s.domain}") # 로그 확인용 (선택사항)
    except Site.DoesNotExist:
         print(f"Site with pk={site_pk} does not exist, skipping revert.")


class Migration(migrations.Migration):

    dependencies = [
        # Django의 sites 앱 마이그레이션 이후에 실행되도록 의존성 추가 (중요!)
        ('sites', '0002_alter_domain_unique'),
        # 회원님의 앱(main_app)의 이전 마이그레이션 파일 이름 (기존 파일 내용과 동일하게)
        ("main_app", "0007_alter_customuser_groups_and_more"),
    ]

    operations = [
        # 위에서 정의한 update_site_domain 함수를 실행하도록 설정
        migrations.RunPython(update_site_domain, reverse_code=revert_site_domain),
    ]